{"version":3,"sources":["images/logosml.png","components/LightDarkToggleSwitch/index.js","components/Navbar/index.js","pages/main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Togg","state","toggleActive","onToggle","bind","console","log","this","setState","onlabel","offlabel","width","checked","onChange","onstyle","offstyle","style","onClick","document","querySelector","color","background","Component","Nav","Container","fluid","Navbar","bg","variant","Col","Brand","href","alt","src","logo","height","className","Main","props","urlChange","e","url","target","value","getData","xhr","XMLHttpRequest","addEventListener","JSON","parse","response","dinus","responseText","open","picked","send","body","positionClicked","Row","md","SplitButton","map","DropdownType","idx","as","ButtonGroup","key","id","size","title","Dropdown","Item","eventKey","handleClick","InputGroup","Prepend","Text","FormControl","aria-describedby","placeholder","defaultValue","type","Form","Group","controlId","Label","Control","rows","Jumbotron","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c46f2be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logosml.98327125.png\";","import React, { Component } from 'react';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\n\r\nclass Togg extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { toggleActive: true };\r\n    this.onToggle = this.onToggle.bind(this);\r\n  }\r\n \r\n  onToggle() {\r\n    console.log(\"something\")\r\n    this.setState({ toggleActive: !this.state.toggleActive });\r\n  }\r\n \r\n  render() {\r\nconst lightMode = ()=> {\r\n  document.querySelector(\"#root\").style.color = '#242424 ';\r\n  document.querySelector(\"#root\").style.background = '#F7F7F7';\r\n  document.querySelector(\"html\").style.background = '#F7F7F7';\r\n  document.querySelector(\"#jumbo\").style.background = '#E0E0E0';\r\n}\r\n\r\nconst darkMode = ()=> {\r\n  document.querySelector(\"#root\").style.color = '#FFFFFF';\r\n  document.querySelector(\"#root\").style.background = '#4E4E4E';\r\n  document.querySelector(\"html\").style.background = '#4E4E4E';\r\n\r\n\r\n  \r\n  console.log('darkmode')}\r\n\r\nconst modeCheck = ()=> { \r\n  console.log(this.state.toggleActive)\r\n  if (this.state.toggleActive === false) {\r\n   \r\n    lightMode()\r\n    // document.querySelector(\"#urlBox\").style.background = '0x242424';\r\n    \r\n    console.log('lightmode ')\r\n  }\r\n  if (this.state.toggleActive === true){\r\n    darkMode()\r\n   }\r\n}\r\n\r\n    return (\r\n      <BootstrapSwitchButton onlabel=\"Dark\" offlabel=\"Light\" width='88' checked={true} onChange={(checked) => {\r\n        this.setState({ toggleActive: checked })\r\n    }} onstyle={\"dark\"} offstyle=\"light\" style=\"border\" onClick = {modeCheck()} />\r\n\r\n    )\r\n  }\r\n \r\n}\r\n\r\nexport default Togg;\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport logo from \"../../images/logosml.png\";\r\nimport Togg from \"../../components/LightDarkToggleSwitch/index\";\r\nimport { Container, Col } from \"react-bootstrap\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <Container fluid>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Col>\r\n          <Navbar.Brand href=\"#home\">\r\n            <img\r\n              alt=\"\"\r\n              src={logo}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />{\" \"}\r\n            Pstmn\r\n          </Navbar.Brand>\r\n        </Col>\r\n        <Togg />\r\n      </Navbar>\r\n    </Container>\r\n  );\r\n}\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"../../App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n    Jumbotron,\r\n  FormControl,\r\n  InputGroup,\r\n  Form,\r\n  Dropdown,\r\n  SplitButton,\r\n  ButtonGroup,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      picked: \"Method\",\r\n      body: \"{someExampleJSON:morjson}\",\r\n      response: \"{example:JSON}\",\r\n      url: \"https://openflags.net/rando\"\r\n    };\r\n  }\r\n  handleClick(positionClicked) {\r\n    // this.state.picked = positionClicked;\r\n    // console.log(this.state.picked + \" was picked\");\r\n    // console.log(\"this is:\", globalThing, positionClicked);\r\n    this.setState({ picked: positionClicked });\r\n  }\r\n\r\n  urlChange = (e) => {\r\n    this.setState({url: e.target.value});\r\n    console.log(this.state.url)\r\n }\r\n  getData = () => {\r\n    // create a new XMLHttpRequest\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    // get a callback when the server responds\r\n    xhr.addEventListener(\"load\", () => {\r\n      // update the state of the component with the result here\r\n    //   console.log(xhr.responseText);\r\n      console.log(JSON.parse(xhr.response));\r\n        let res = JSON.parse(xhr.response)\r\n        console.log()\r\n      const dinus = xhr.responseText;\r\n    //   console.log(dinus);\r\n      this.setState({ response: dinus });\r\n    });\r\n    // open the request with the verb and the url\r\n    xhr.open(this.state.picked, this.state.url);\r\n    // send the request\r\n    xhr.send();\r\n  };\r\n\r\n  render() {\r\n    // const thing = globalThing;\r\n    return (\r\n      <Container fluid>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col md={1}>\r\n              {[SplitButton].map((DropdownType, idx) => (\r\n                <DropdownType\r\n                  as={ButtonGroup}\r\n                  key={idx}\r\n                  id={`dropdown-button-drop-${idx}`}\r\n                  size=\"lg\"\r\n                  title={this.state.picked}\r\n                >\r\n                  <Dropdown.Item\r\n                    eventKey=\"POST\"\r\n                    onClick={() => this.handleClick(\"POST\")}\r\n                  >\r\n                    Post\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    eventKey=\"GET\"\r\n                    onClick={() => this.handleClick(\"GET\")}\r\n                  >\r\n                    Get\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    eventKey=\"PUT\"\r\n                    onClick={() => this.handleClick(\"PUT\")}\r\n                  >\r\n                    Put\r\n                  </Dropdown.Item>\r\n                </DropdownType>\r\n              ))}\r\n            </Col>\r\n            <Col md={10}>\r\n              <InputGroup className=\"mb-3\" size=\"lg\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"basic-addon3\">\r\n                    URL to {this.state.picked} https://openflags.net/rando\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  id=\"basic-url\"\r\n                  aria-describedby=\"basic-addon3\"\r\n                  placeholder=\"https://openflags.net/rando\"\r\n                  defaultValue=''\r\n                  onChange={this.urlChange} \r\n                />\r\n              </InputGroup>\r\n            </Col>\r\n            <Col md={1}>\r\n              <input type=\"submit\" value=\"Submit\" onClick={this.getData} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>\r\n              <h1>Enter JSON body(if needed)</h1>\r\n            </Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows=\"3\"\r\n              placeholder={this.state.body}\r\n            />\r\n          </Form.Group>\r\n        </Container>\r\n        <br />\r\n\r\n        <Container>\r\n          <div>\r\n            <Jumbotron fluid id='jumbo'>\r\n              <Container>\r\n            <h1>Response From Server</h1>\r\n                <p>\r\n                  {this.state.response}\r\n                </p>\r\n              </Container>\r\n            </Jumbotron>\r\n          </div>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"../src/components/Navbar/index\";\nimport Main from '../src/pages/main/index'\n\nimport {\n  Container,\n  // Row,\n  // Col,\n} from \"react-bootstrap\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { picked: \"Method\", body: \"{someExampleJSON:morjson}\" };\n  }\n  handleClick(positionClicked) {\n    // this.state.picked = positionClicked;\n    // console.log(this.state.picked + \" was picked\");\n    // console.log(\"this is:\", globalThing, positionClicked);\n    this.setState({ picked: positionClicked });\n  }\n  render() {\n    // const thing = globalThing;\n    return (\n      <Container fluid>\n        <Navbar />\n        <br />\n       <Main />\n      </Container>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}