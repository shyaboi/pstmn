{"version":3,"sources":["images/logosml.png","components/LightDarkToggleSwitch/index.js","components/Navbar/index.js","pages/main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Togg","state","toggleActive","onToggle","bind","console","log","this","setState","onlabel","offlabel","width","checked","onChange","onstyle","offstyle","style","onClick","document","querySelector","color","background","Component","Nav","Container","fluid","Navbar","bg","variant","Col","Brand","href","alt","src","logo","height","className","Main","props","urlChange","e","url","target","value","bodyChange","body","postData","time","meth","picked","a","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","JSON","stringify","response","json","then","dataType","strang","strangJSON","responseType","timeEnd","positionClicked","Row","md","SplitButton","map","DropdownType","idx","as","ButtonGroup","key","id","size","title","Dropdown","Item","eventKey","handleClick","InputGroup","Prepend","Text","FormControl","aria-describedby","placeholder","defaultValue","Button","type","Form","Group","controlId","Label","Control","rows","Jumbotron","React","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,qC,6OC6D5BC,E,kDAzDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,cAAc,GAC7B,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAHJ,E,uDAOZC,QAAQC,IAAI,aACZC,KAAKC,SAAS,CAAEN,cAAeK,KAAKN,MAAMC,iB,+BAGlC,IAAD,OAoCP,OACE,kBAAC,IAAD,CAAuBO,QAAQ,OAAOC,SAAS,QAAQC,MAAM,KAAKC,SAAS,EAAMC,SAAU,SAACD,GAC1F,EAAKJ,SAAS,CAAEN,aAAcU,KAC/BE,QAAS,OAAQC,SAAS,QAAQC,MAAM,SAASC,SAhBtDZ,QAAQC,IAAI,EAAKL,MAAMC,eACS,IAA5B,EAAKD,MAAMC,eAtBfgB,SAASC,cAAc,SAASH,MAAMI,MAAQ,WAE9CF,SAASC,cAAc,SAASH,MAAMK,WAAa,UACnDH,SAASC,cAAc,QAAQH,MAAMK,WAAa,UAwBhDhB,QAAQC,IAAI,qBAEkB,IAA5B,EAAKL,MAAMC,eArBfgB,SAASC,cAAc,SAASH,MAAMI,MAAQ,UAC9CF,SAASC,cAAc,SAASH,MAAMK,WAAa,UACnDH,SAASC,cAAc,QAAQH,MAAMK,WAAa,UAQlDhB,QAAQC,IAAI,qB,GAhCKgB,a,gBCwBJC,MArBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SACjB,yBACEC,IAAI,GACJC,IAAKC,IACLvB,MAAM,KACNwB,OAAO,KACPC,UAAU,6BACT,IAPL,aAWF,kBAAC,EAAD,S,kHCiKOC,E,kDAnKb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcVC,UAAY,SAACC,GACT,EAAKhC,SAAS,CAACiC,IAAKD,EAAEE,OAAOC,SAhBZ,EAmBpBC,WAAa,SAACJ,GACb,EAAKhC,SAAS,CAACqC,KAAML,EAAEE,OAAOC,QAC9BtC,QAAQC,IAAI,EAAKL,MAAM4C,OArBJ,EAwBnBC,SAAW,WACTzC,QAAQ0C,KAAK,QAEb,EAAKvC,SAAS,CAAEqC,KAAM,EAAK5C,MAAM4C,OAGjC,IAAMG,EAAO,EAAK/C,MAAMgD,OANV,4CAQd,4CAAAC,EAAA,6DAAwBT,EAAxB,+BAA8B,GAAIU,EAAlC,+BAAyC,GAAzC,SAEyBC,MAAMX,EAAK,CAChCY,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,cAChBd,KAAMe,KAAKC,UAAUV,KAbzB,cAEQW,EAFR,yBAeSA,EAASC,QAflB,4CARc,sBAOd1D,QAAQC,IAAI0C,GAPE,0CA4BdF,CAAS,wCAAyC,CAAED,KAAM,EAAK5C,QAC9D+D,MAAK,SAAAb,GACJ,IAAMc,SAAkBd,EACxB,GAAkB,kBAARA,EAAiB,CACzB,IAAIe,EAASN,KAAKC,UAAUV,GAC5B,EAAK3C,SAAS,CAAEsD,SAAUI,IAE5B,GAAkB,kBAARf,EAAiB,CAC3B,IAAIgB,EAAa,kBAAC,IAAD,CAAWlC,IAAKkB,IACjC,EAAK3C,SAAS,CAAEsD,SAAUK,IAG1B,EAAK3D,SAAS,CAAE4D,aAAcH,IAC9B5D,QAAQgE,QAAQ,QAEhBhE,QAAQC,IAAI6C,OAjEd,EAAKlD,MAAQ,CACXgD,OAAQ,SACRJ,KAAM,gCACNuB,aAAa,eACbN,SAAU,iBACVrB,IAAK,4CAPU,E,wDAUP6B,GAEV/D,KAAKC,SAAS,CAAEyC,OAAQqB,M,+BA4DhB,IAAD,OACP,OACE,kBAAC9C,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACD,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC8C,EAAA,EAAD,KACE,kBAAC1C,EAAA,EAAD,CAAK2C,GAAI,GACN,CAACC,KAAaC,KAAI,SAACC,EAAcC,GAAf,OACjB,kBAACD,EAAD,CACEE,GAAIC,IACJC,IAAKH,EACLI,GAAE,+BAA0BJ,GAC5BK,KAAK,KACLC,MAAO,EAAKjF,MAAMgD,QAElB,kBAACkC,EAAA,EAASC,KAAV,CACEC,SAAS,MACTpE,QAAS,kBAAM,EAAKqE,YAAY,SAFlC,OAMA,kBAACH,EAAA,EAASC,KAAV,CACEC,SAAS,OACTpE,QAAS,kBAAM,EAAKqE,YAAY,UAFlC,aAeN,kBAACzD,EAAA,EAAD,CAAK2C,GAAI,IACP,kBAACe,EAAA,EAAD,CAAYnD,UAAU,OAAO6C,KAAK,MAChC,kBAACM,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBT,GAAG,gBAApB,UACUzE,KAAKN,MAAMgD,SAGvB,kBAACyC,EAAA,EAAD,CACEV,GAAG,YACHW,mBAAiB,eACjBC,YAAY,yDACZC,aAAa,GACbhF,SAAUN,KAAKgC,cAIrB,kBAACV,EAAA,EAAD,CAAK2C,GAAI,GACP,kBAACsB,EAAA,EAAD,CAAQC,KAAK,SAASpD,MAAM,SAASsC,KAAK,KAAKhE,QAASV,KAAKuC,UAA7D,aAIN,kBAACtB,EAAA,EAAD,KACE,kBAACwE,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCACpB,kBAACF,EAAA,EAAKG,MAAN,KACE,2DAEF,kBAACH,EAAA,EAAKI,QAAN,CACEvB,GAAG,WACHwB,KAAK,IACLT,YAAarF,KAAKN,MAAM4C,KACxBhC,SAAUN,KAAKqC,eAKrB,6BAEA,kBAACpB,EAAA,EAAD,KACE,6BACE,kBAAC8E,EAAA,EAAD,CAAW7E,OAAK,EAACuD,GAAG,SAClB,kBAACxD,EAAA,EAAD,KACF,oDACA,4BACGjB,KAAKN,MAAMmE,cAEV,kBAAC5C,EAAA,EAAD,KACGjB,KAAKN,MAAM6D,mB,GA1JXyC,IAAMjF,WCSVkF,E,kDAfb,WAAYlE,GAAQ,uCACZA,G,qDAKN,OACE,kBAACd,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,EAAD,MACA,6BACD,kBAAC,EAAD,W,GAXW8E,IAAMjF,WCAlBmF,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThD,MAAK,SAAAqD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtH,QACfiH,UAAUC,cAAcO,YAI1BrH,QAAQC,IACN,iHAKE2G,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBhH,QAAQC,IAAI,sCAGR2G,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLzH,QAAQyH,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/G,SAASgH,eAAe,SDYnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,SAAwBzB,OAAOC,SAAS7E,MACpDsG,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,SAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtC7D,MAAM4D,EAAO,CACXvD,QAAS,CAAE,iBAAkB,YAE5BO,MAAK,SAAAF,GAEJ,IAAMyE,EAAczE,EAASL,QAAQ+E,IAAI,gBAEnB,MAApB1E,EAAS2E,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAM3E,MAAK,SAAAqD,GACjCA,EAAauB,aAAa5E,MAAK,WAC7B2C,OAAOC,SAASiC,eAKpB9B,EAAgBC,EAAOC,MAG1BY,OAAM,WACLxH,QAAQC,IACN,oEAvFAwI,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAM3E,MAAK,WACjC3D,QAAQC,IACN,iHAMJyG,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.a4141167.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logosml.98327125.png\";","import React, { Component } from 'react';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\n\r\nclass Togg extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { toggleActive: true };\r\n    this.onToggle = this.onToggle.bind(this);\r\n  }\r\n \r\n  onToggle() {\r\n    console.log(\"something\")\r\n    this.setState({ toggleActive: !this.state.toggleActive });\r\n  }\r\n \r\n  render() {\r\nconst lightMode = ()=> {\r\n  document.querySelector(\"#root\").style.color = '#242424 ';\r\n  // document.querySelector(\"#responseBox\").style.color = '#242424 ';\r\n  document.querySelector(\"#root\").style.background = '#F7F7F7';\r\n  document.querySelector(\"html\").style.background = '#F7F7F7';\r\n  // document.querySelector(\"#jumbo\").style.background = '#E0E0E0';\r\n}\r\n\r\nconst darkMode = ()=> {\r\n  document.querySelector(\"#root\").style.color = '#FFFFFF';\r\n  document.querySelector(\"#root\").style.background = '#4E4E4E';\r\n  document.querySelector(\"html\").style.background = '#4E4E4E';\r\n  // if (document.querySelector('#responseBox')== !null) {\r\n  //   console.log('got the not nullyfe')\r\n  //   document.querySelector(\"#responseBox\").style.color = '#242424 ';\r\n  // }\r\n  \r\n\r\n  \r\n  console.log('darkmode')}\r\n\r\nconst modeCheck = ()=> { \r\n  console.log(this.state.toggleActive)\r\n  if (this.state.toggleActive === false) {\r\n   \r\n    lightMode()\r\n    // document.querySelector(\"#urlBox\").style.background = '0x242424';\r\n    \r\n    console.log('lightmode ')\r\n  }\r\n  if (this.state.toggleActive === true){\r\n    darkMode()\r\n   }\r\n}\r\n\r\n    return (\r\n      <BootstrapSwitchButton onlabel=\"Dark\" offlabel=\"Light\" width='88' checked={true} onChange={(checked) => {\r\n        this.setState({ toggleActive: checked })\r\n    }} onstyle={\"dark\"} offstyle=\"light\" style=\"border\" onClick = {modeCheck()} />\r\n\r\n    )\r\n  }\r\n \r\n}\r\n\r\nexport default Togg;\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport logo from \"../../images/logosml.png\";\r\nimport Togg from \"../../components/LightDarkToggleSwitch/index\";\r\nimport { Container, Col } from \"react-bootstrap\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <Container fluid>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Col>\r\n          <Navbar.Brand href=\"#home\">\r\n            <img\r\n              alt=\"\"\r\n              src={logo}\r\n              width=\"30\"\r\n              height=\"30\"\r\n              className=\"d-inline-block align-top\"\r\n            />{\" \"}\r\n            Getwoman\r\n          </Navbar.Brand>\r\n        </Col>\r\n        <Togg />\r\n      </Navbar>\r\n    </Container>\r\n  );\r\n}\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"../../App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ReactJson from 'react-json-view'\r\n\r\nimport {\r\n    Jumbotron,\r\n  FormControl,\r\n  InputGroup,\r\n  Form,\r\n  Dropdown,\r\n  Button,\r\n  SplitButton,\r\n  ButtonGroup,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      picked: \"Method\",\r\n      body: '{\"someExampleJSON\":\"morjson\"}',\r\n      responseType:\"Example JSON\",\r\n      response: \"{example:JSON}\",\r\n      url: \"https://openflags.net/api/usa/california\"\r\n    };\r\n  }\r\n  handleClick(positionClicked) {\r\n    // console.log(this.state.picked + \" was picked\");\r\n    this.setState({ picked: positionClicked });\r\n  }\r\n\r\nurlChange = (e) => {\r\n    this.setState({url: e.target.value});\r\n    // console.log(this.state.url)\r\n }\r\n bodyChange = (e) => {\r\n  this.setState({body: e.target.value});\r\n  console.log(this.state.body)\r\n}\r\n\r\n  postData = ()=> {\r\n    console.time('init')\r\n    // Example POST method implementation:\r\n    this.setState({ body: this.state.body });\r\n    // const bod = this.state.body\r\n    // console.log(JSON.stringify(bod))\r\n    const meth = this.state.picked\r\n    console.log(meth)\r\n    async function postData(url = '', data = {}) {\r\n      // Default options are marked with *\r\n      const response = await fetch(url, {\r\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n      });\r\n      return response.json(); // parses JSON response into native JavaScript objects\r\n    }\r\n\r\n  \r\n    \r\n    postData('https://getwomanserver.herokuapp.com/', { body: this.state })\r\n    .then(data => {\r\n      const dataType = typeof(data)\r\n      if(typeof(data)==='string'){\r\n        var strang = JSON.stringify(data)\r\n        this.setState({ response: strang });\r\n      }\r\n      if(typeof(data)==='object'){\r\n      var strangJSON = <ReactJson src={data} />\r\n      this.setState({ response: strangJSON });\r\n\r\n      }\r\n      this.setState({ responseType: dataType });\r\n      console.timeEnd('init')\r\n\r\n      console.log(data);\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col md={1}>\r\n              {[SplitButton].map((DropdownType, idx) => (\r\n                <DropdownType\r\n                  as={ButtonGroup}\r\n                  key={idx}\r\n                  id={`dropdown-button-drop-${idx}`}\r\n                  size=\"lg\"\r\n                  title={this.state.picked}\r\n                >\r\n                  <Dropdown.Item\r\n                    eventKey=\"GET\"\r\n                    onClick={() => this.handleClick(\"GET\")}\r\n                  >\r\n                    Get\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    eventKey=\"POST\"\r\n                    onClick={() => this.handleClick(\"POST\")}\r\n                  >\r\n                    Post\r\n                  </Dropdown.Item>\r\n                  {/* <Dropdown.Item\r\n                    eventKey=\"PUT\"\r\n                    onClick={() => this.handleClick(\"PUT\")}\r\n                  >\r\n                    Put\r\n                  </Dropdown.Item> */}\r\n                </DropdownType>\r\n              ))}\r\n            </Col>\r\n            <Col md={10}>\r\n              <InputGroup className=\"mb-3\" size=\"lg\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"basic-addon3\">\r\n                    URL to {this.state.picked}\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                  id=\"basic-url\"\r\n                  aria-describedby=\"basic-addon3\"\r\n                  placeholder=\"https://openflags.net/api/json/flagInfo/usa/california\"\r\n                  defaultValue=''\r\n                  onChange={this.urlChange} \r\n                />\r\n              </InputGroup>\r\n            </Col>\r\n            <Col md={1}>\r\n              <Button type=\"submit\" value=\"Submit\" size=\"lg\" onClick={this.postData} >Submit</Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>\r\n              <h1>Enter JSON body(if needed)</h1>\r\n            </Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows=\"3\"\r\n              placeholder={this.state.body}\r\n              onChange={this.bodyChange} \r\n\r\n            />\r\n          </Form.Group>\r\n        </Container>\r\n        <br />\r\n\r\n        <Container>\r\n          <div>\r\n            <Jumbotron fluid id='jumbo'>\r\n              <Container>\r\n            <h1>Response From Server</h1>\r\n            <h2>\r\n              {this.state.responseType}\r\n            </h2>\r\n                <Container>\r\n                  {this.state.response}\r\n                </Container>\r\n              </Container>\r\n            </Jumbotron>\r\n          </div>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Navbar from \"../src/components/Navbar/index\";\r\nimport Main from '../src/pages/main/index'\r\n\r\nimport {\r\n  Container,\r\n  // Row,\r\n  // Col,\r\n} from \"react-bootstrap\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    // const thing = globalThing;\r\n    return (\r\n      <Container fluid>\r\n        <Navbar />\r\n        <br />\r\n       <Main />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}